[{"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/store.js":"1","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/App.js":"2","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/auth.js":"3","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/auth.js":"4","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/auth/Login.js":"5","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/subreddit.js":"6","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/layout/Navbar.js":"7","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/auth/Register.js":"8","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/index.js":"9","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/types.js":"10","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/subreddit.js":"11","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/index.js":"12","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/layout/Landing.js":"13","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/dashboard/DashboardTable.js":"14","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/dashboard/Dashboard.js":"15","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/profile/Settings.js":"16","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/profile.js":"17"},{"size":381,"mtime":1608232226144,"results":"18","hashOfConfig":"19"},{"size":1093,"mtime":1617052277621,"results":"20","hashOfConfig":"19"},{"size":2464,"mtime":1614025263585,"results":"21","hashOfConfig":"19"},{"size":1055,"mtime":1614025106685,"results":"22","hashOfConfig":"19"},{"size":1709,"mtime":1617229672197,"results":"23","hashOfConfig":"19"},{"size":1504,"mtime":1610574862621,"results":"24","hashOfConfig":"19"},{"size":802,"mtime":1617232374985,"results":"25","hashOfConfig":"19"},{"size":2127,"mtime":1617229148359,"results":"26","hashOfConfig":"19"},{"size":164,"mtime":1608596091322,"results":"27","hashOfConfig":"19"},{"size":764,"mtime":1614022082386,"results":"28","hashOfConfig":"19"},{"size":1781,"mtime":1614040029322,"results":"29","hashOfConfig":"19"},{"size":197,"mtime":1606953285248,"results":"30","hashOfConfig":"19"},{"size":512,"mtime":1617204651389,"results":"31","hashOfConfig":"19"},{"size":1263,"mtime":1617410026719,"results":"32","hashOfConfig":"19"},{"size":2525,"mtime":1617634850335,"results":"33","hashOfConfig":"19"},{"size":1994,"mtime":1617639335412,"results":"34","hashOfConfig":"19"},{"size":848,"mtime":1614023175200,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"aii0fv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/store.js",[],["78","79"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/App.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/auth.js",[],["80","81"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/auth.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/auth/Login.js",[],["82","83"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/subreddit.js",[],["84","85"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/layout/Navbar.js",[],["86","87"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/auth/Register.js",[],["88","89"],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/reducers/index.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/types.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/subreddit.js",["90"],"import {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_KEYWORDS,\n} from './types';\nimport axios from 'axios';\n\nexport const submitSubredditInfo = ({\n  id,\n  subredditName,\n  subredditKeywords,\n}) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const body = JSON.stringify({\n      id,\n      subredditName,\n      subredditKeywords,\n    });\n\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      dispatch({\n        type: UPDATE_SUBREDDIT_KEYWORDS,\n        payload: res.data,\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const fetchUserSubreddits = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        id,\n      },\n    });\n\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const deleteMonitoredSubreddit = (id, subredditName) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        id,\n        subredditName,\n      },\n    });\n\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};\n","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/index.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/layout/Landing.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/dashboard/DashboardTable.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/dashboard/Dashboard.js",["91"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n} from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: { subreddits },\n  authState: {\n    loggedInUser: { id },\n    isAuthenticated,\n  },\n}) => {\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: '',\n  });\n\n  const { subredditName, subredditKeywords } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitSubredditInfo({ id, subredditName, subredditKeywords });\n  };\n\n  const handleSubredditName = (e) => {\n    setFormData({\n      ...formData,\n      subredditName: e.target.value,\n    });\n  };\n\n  const handleSubredditKeywords = (e) => {\n    setFormData({\n      ...formData,\n      subredditKeywords: e.target.value,\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map((subreddit) => (\n      <DashboardTable subreddit={subreddit} />\n    ));\n  };\n\n  if (!isAuthenticated) {\n    return <Redirect to='/register' />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='submissionBox'>\n        <h2>Subreddits To Monitor</h2>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <p>Subreddit (/r/)</p>\n          <input\n            type='text'\n            placeholder='technology'\n            value={subredditName}\n            onChange={handleSubredditName}\n          />\n          <p className='smallText'>One subreddit per submission.</p>\n          <div className='line'></div>\n\n          <p>Keywords</p>\n          <input\n            type='text'\n            placeholder='javascript, reactjs'\n            value={subredditKeywords}\n            onChange={handleSubredditKeywords}\n          />\n          <p className='smallText'>Comma separated list.</p>\n\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n\n      {displaySubredditTables()}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  subredditState: state.subreddit,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n})(Dashboard);\n","/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/profile/Settings.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/profile.js",["92","93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"95","replacedBy":"99"},{"ruleId":"97","replacedBy":"100"},{"ruleId":"95","replacedBy":"101"},{"ruleId":"97","replacedBy":"102"},{"ruleId":"95","replacedBy":"103"},{"ruleId":"97","replacedBy":"104"},{"ruleId":"95","replacedBy":"105"},{"ruleId":"97","replacedBy":"106"},{"ruleId":"95","replacedBy":"107"},{"ruleId":"97","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":7,"column":3,"nodeType":"111","messageId":"112","endLine":7,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":22,"column":6,"nodeType":"115","endLine":22,"endColumn":8,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"117","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":29},{"ruleId":"109","severity":1,"message":"118","line":17,"column":11,"nodeType":"111","messageId":"112","endLine":17,"endColumn":14},{"ruleId":"109","severity":1,"message":"118","line":28,"column":11,"nodeType":"111","messageId":"112","endLine":28,"endColumn":14},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],["119"],["120"],["119"],["120"],["119"],["120"],["119"],["120"],["119"],["120"],"no-unused-vars","'DELETE_SUBREDDIT_FAIL' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchUserSubreddits' and 'id'. Either include them or remove the dependency array. If 'fetchUserSubreddits' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["121"],"'SUBMIT_PHONE_NUMBER' is defined but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [fetchUserSubreddits, id]",{"range":"124","text":"125"},[595,597],"[fetchUserSubreddits, id]"]